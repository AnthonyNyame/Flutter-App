name: Android CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ main ]  

env:
  flutter_version: "3.0.3"
  flutter_channel: 'stable'
  java_version: "12.x"

  # run jobs to test and build the android and ios app
jobs:
  # setup dependencies on flutter
  setup:
    name: Get flutter dependencies
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            flutter_path: /opt/hostedtoolcache/flutter
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - name: Cache Flutter dependencies
        uses: actions/cache@v2
        with:
          path: ${{ matrix.flutter_path }}
          key: ${{ runner.os }}-flutter-install-cache-${{ env.flutter_version }}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
          flutter_version: ${{ env.flutter_version }}
      - name: Install Flutter dependencies
        run: flutter pub get
      - name: Lint
        run: flutter format --dry-run . --set-exit-if-changed

  code_quality:
    name: Dart-code-metrics-actions
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - uses: actions/checkout@v2
      - name: Cache Flutter
        id: cache-flutter
        uses: actions/cache@v2
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-install-cache-${{ env.flutter_version }}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
          flutter_version: ${{ env.flutter_version }}
      - name: Install Flutter dependencies
        run: |
          flutter upgrade
          flutter pub get
      - name: dart-code-metrics
        uses: dart-code-checker/dart-code-metrics-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Analyze and Test
      #   run: |
      #     ./tool/ci.sh
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: coverage/lcov.info

  # run linting and unit test
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ${{ matrix.os }}
    needs: setup

    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            flutter_path: /opt/hostedtoolcache/flutter
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with: 
          java-version: ${{ env.java_version }}
      - name: Cache Flutter
        id: cache-flutter
        uses: actions/cache@v2
        with:
          path: ${{ matrix.flutter_path }}
          key: ${{ runner.os }}-flutter-install-cache-${{ env.flutter_version }}
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
          flutter_version: ${{ env.flutter_version }}
      - name: Install dependencies
        run: flutter pub get
      - name: Lint
        run: flutter analyze
      - name: Test
        run: flutter test

  # build android app
  build_android:
    name: Build Android APK
    runs-on: ${{ matrix.os }}
    needs: [setup, code_quality, flutter_test]

    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            flutter_path: /opt/hostedtoolcache/flutter
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Install Ruby 
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: ${{ env.ruby_version }}
      #     bundler-cache: true
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.java_version }}
      - name: Cache Flutter dependencies
        uses: actions/cache@v1
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-install-cache-${{ env.flutter_version }}
          # restore-keys: |
          #   ${{ runner.os }}-flutter-cache-

      - uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
          flutter_version: ${{ env.flutter_version }}

      # - name: Decoding android/key.properties
      #   run: echo "${{ secrets.KEY_PROPERTIES_PROD  }}" | base64 --decode > android/key.properties

      # - name: Decoding android/neumodore_key.jks
      #   run: echo "${{ secrets.KEYSTORE_JKS_PROD }}" | base64 --decode > android/key.jks

      - name: Install Flutter dependencies
        run: flutter pub get
      - name: Build APK
        run: flutter build apk --debug --split-per-abi
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          release_branches: main
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          artifacts: "build/app/outputs/apk/debug/*.apk" # build/app/outputs/bundle/release/*.aab"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Save APK to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: APK
          path: build/app/outputs/apk/release/*.apk
          retention-days: 3
      # - name: Deploy to github pages
      #   uses: awb-pw/deploy-to-github-pages-action@1.1.1
      #   env:
      #     AUTHOR: anthonynyame
      #     BUILD_PATH: build/app/outputs/apk/debug/*.apk
      #     GITHUB_PAGE_NAME: anthonynyame.github.io
      #     PA_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: pubilsh on Github pages
      #   uses: bluefireteam/flutter-gh-pages@v7
      #   with:
      #     baseHref: /Flutter/

      # - name: Build APPBUNDLE
      #   run: flutter build appbundle --release
      # - name: Create Github Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/*.aab"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      # - name: Save APPBUNDLE to Artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: APPBUNDLE
      #     path: build/app/outputs/bundle/release/app-release.aab
  
  # build ios app
  # build_ios:
  #   name: Build flutter (iOS)
  #   runs-on: macos-latest
  #   needs: [ setup, code_quality, flutter_test ]
  #   steps:
  #     - name: say hello
  #       run: echo "Hello World"

  publish:
    runs-on: ubuntu-latest 
    needs: [build_android]
    permissions: 
      contents: read
      packages: write 

    # steps:
    #   - uses: actions/checkout@v2
    #   - uses: actions/setup-java@v2
    #     with:
    #       java-version: '11'
    #       distribution: 'adopt'
    #   - name: Publish to Github Packages
    #     run: ./gradlew publish --stacktrace
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #       GH_USER_NAME: ${{ secrets.GH_USER_NAME }}
    #       GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
      
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ env.java_version }}
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Publish package
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # github_pages:
  #   name: Publish to github page 
  #   runs-on: ubuntu-latest
  #   needs: [ build_android]
  #   steps:
  #     - name: say hello
  #       run: echo "Hello World"
  
  # Deploy:
  #   name: Upload beta
  #   runs-on: ubuntu-latest
  #   needs: [ setup, code_quality, flutter_test, build_android, build_ios, github_pages ]
  #   steps:
  #     - name: say hello
  #       run: echo "Hello World"